openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD22059
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/QueryPagination'
        - $ref: '#/components/parameters/PathPagination'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
        400:
          description: Bad request 
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
        403:
          description: Acces denied with the data
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
        500:
          description: Internal server error
          content:
            application/json:
              schema : 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      summary: Assign author to a book
      operationId: assignAuthorToBook
      parameters:
        - in: path
          name: bookId
          description: Id of book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Id of the authorto be assigned to the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author assigned to the book successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
        400:
          description: Bad request 
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
        403:
          description: Acces denied with the data
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
        500:
          description: Internal server error
          content:
            application/json:
              schema : 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Book"
  /authors/name:
    get:
      summary: Get all authors or filter by name
      description: Retrieve a list of authors or filtered by name
      operationId: getAuthors
      tags:
        - "Authors"
      parameters:
        - in: query
          name: authorName 
          description: Filter authors by name 
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/QueryPagination'
        - $ref: '#/components/parameters/PathPagination'
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        400:
          description: Bad request 
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        403:
          description: Acces denied with the data
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal server error
          content:
            application/json:
              schema : 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - "Authors"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          description: Bad request 
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        403:
          description: Acces denied with the data
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal server error
          content:
            application/json:
              schema : 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          description: Bad request 
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
        500:
          description: Internal server error
          content:
            application/json:
              schema : 
                allOf:
                  - $ref: "#/components/responses/CommonResponse"
                  - type: object
                    properties:
                      body:
                        $ref: "#/components/schemas/Author"
components:
  schemas:
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
      properties:
        author: 
          $ref: '#/components/schemas/Author'
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
  parameters:        
      QueryPagination:
        name: page
        description: Page Number for pagination (default 1)
        in: query
        schema:
          type: integer
          default: 1
        required: false
      PathPagination:
        name: PathPagination
        description: Page size for pagination default 50
        in: query
        schema:
          default: 50
          type: integer
        required: false
  responses:
    CommonResponse:
      description: response 
      content:
        application/json:
          schema: 
            type: array
            properties:
              status:
                type: object
                properties:
                  code: 
                    type: integer
                  message:
                    type: string
              body:
                type: object
