openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22059
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateRange
          description: 'Filter books by releaseDate within a date range'
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: 'Page number for pagination (default: 1)'
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: 'Number of the pageSize (default: 50)'
          required: false
          schema:
            type: integer
            default: 50 
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      summary: Assign author to a book
      operationId: assignAuthorToBook
      parameters:
        - in: path
          name: bookId
          description: Id of book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: Id of the authorto be assigned to the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author assigned to the book successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors/name:
    get:
      summary: Get all authors or filter by name
      description: Retrieve a list of authors or filtered by name
      operationId: getAuthors
      tags:
        - "Authors"
      parameters:
        - in: query
          name: authorName 
          description: Filter authors by name 
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: "Page number for pagination (default: 1)"
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: "Number of items per page (default: 50)"
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - "Authors"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /topics:
    get:  
      summary: get all topic 
      tags:
      - "Topics"
      operationId: getTopic
      parameters:
        - in: query
          name: topicName 
          description: Filter topic 
          schema:
            type: string
        - in: query
          name: page
          description: 'Page number for pagination (default: 1)'
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: 'Number of the pageSize (default: 50)'
          required: false
          schema:
            type: integer
            default: 50 
      responses:
        200:
          description: Topic filtered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrupdateTopic'
    put:
      summary: create or update a topic 
      operationId: CrupdateTopic
      tags:
        - "Topics"
      requestBody: 
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateTopic"
      responses:
        200:
          description: Teh list of the topic crupdated
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/CrupdateTopic'
  /delete/{aId}:
    delete:
        tags:
          - "Topics"
        summary: Delete a topic 
        operationId: deleteTopic
        parameters:
          - name: aId
            in: path
            description: Topic to deleted
            schema:
              type: string
            required: true
        responses:
          200:
            description: Teh topic to be deleted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/topic'
  /authorsTopics:
    get:
      summary: Get the list of author topic
      tags:
        - "Topics"
      operationId: getAuthorsTopics
      responses:
        200:
          description: the list of the authorTopic 
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/topic"
  /topics/{topicId}/authors/{authorId}:
    put:
      tags:
        - "Topics"
      summary: assign author to the topic
      operationId: addAuthorTopic
      parameters:
        - in: path
          name: topicId
          schema: 
            type: string
          required: true
        - in: path
          name: authorId
          schema: 
            type: string
          required: true
      responses:
        200: 
          description: create or update authorTopic
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/topic'
components:
  schemas:
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    CrupdateTopic:
      type: object
      properties:
        id:
          type: string
        topicName:
          type: string
          enum:
            - ROMANCE
            - ADVENTURE
            - OTHER
    Author:
          type: object
          properties:
            id:
              type: string
            authorName: 
              type: string
            sex:
              $ref: "#/components/schemas/Sex"
    topic:
      type: object
      allOf:
          - $ref: "#/components/schemas/Author"
          - $ref: "#/components/schemas/CrupdateTopic"
    Sex:
      type: string
      enum:
        - M
        - F
    Book:
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
      properties:
        author: 
          $ref: '#/components/schemas/Author'